apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-pipline
spec:
  entrypoint: build-and-deploy
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
    - metadata:
        name: workdir                     # name of volume claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: giturl
        value: https://github.com/MatiWall/  # Provide the correct GitHub URL here
      - name: revision
        value: HEAD
      - name: branch
        value: main
      - name: repo
        value: catcode-backend
      - name: subpath
        value: /services/core-api
      - name: registry
        value: docker-registry.mw.local/
      - name: base-image
        value: python:3.12-2
  templates:
    - name: build-and-deploy
      steps:
        - - name: cloner
            template: cloner
            arguments:
              parameters:
                - name: giturl
                  value: "{{workflow.parameters.giturl}}"
                - name: revision
                  value: "{{workflow.parameters.revision}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: subpath
                  value: "{{workflow.parameters.subpath}}"
        - - name: install-dependencies
            template: install-dependencies
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"
                - name: base-image
                  value: "{{workflow.parameters.base-image}}"
        - - name: build
            template: build
        - - name: push
            template: push
            arguments:
              parameters:
                - name: registry
                  value: "{{workflow.parameters.registry}}"

   
    - name: cloner
      inputs:
        parameters:
          - name: giturl
          - name: revision
          - name: branch
          - name: repo
          - name: subpath
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            git clone {{inputs.parameters.giturl}}{{inputs.parameters.repo}} --branch {{inputs.parameters.branch}} /tmp/repo
            mv /tmp/repo/{{inputs.parameters.repo}}{{inputs.parameters.path}}/* /src
            rm -rf /tmp/repo
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: src/
    - name: install-dependencies
      inputs:
        parameters:
          - name: registry
          - name: base-image
      imagePullPolicy: Always
      container:
        image: "{{inputs.parameters.registry}}{{inputs.parameters.base-image}}"
        command: [sh, -c]
        args:
          - |
            ls -l
            poetry install
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: /src
    - name: build
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            until docker ps; do sleep 1; done;
            docker build -t image:0.0.1 .
            docker save -o /src/image.tar image:0.0.1
            ls -l /src
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: src/
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port
    
    - name: push
      inputs:
        parameters:
          - name: registry
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            ls -l
            until docker ps; do sleep 1; done;
            name=$(cat pyproject.toml | grep name | head -1 | grep -oh "\".*\"")
            version=$(cat pyproject.toml | grep version | head -1 | grep -oh "\".*\"")
            docker load < /src/image.tar
            docker tag image:0.0.1 {{inputs.parameters.registry}}:$version
            docker push {{inputs.parameters.registry}}/$name:$version
        workingDir: /src
        volumeMounts:
          - name: workdir
            mountPath: src/
          - name: docker-daemon-config
            mountPath: /etc/docker/daemon.json
            subPath: daemon.json
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port  
  volumes:
    - name: docker-daemon-config
      configMap:
        name: docker-daemon-config