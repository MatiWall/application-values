apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: python-base-image
spec:
  entrypoint: build-and-deploy
  serviceAccountName: argo-workflow-svc
  volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
    - metadata:
        name: workdir                     # name of volume claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: python-version
        value: "3.12"
      - name: image-version
        value: "1"
      - name: registry
        value: docker-registry.mw.local
  templates:
    - name: build-and-deploy
      steps:
        - - name: build
            template: build
            arguments:
              parameters:
                - name: python-version
                  value: "{{workflow.parameters.python-version}}"
                - name: image-version
                  value: "{{workflow.parameters.image-version}}"
                - name: registry
                  value: "{{workflow.parameters.registry}}"
        - - name: push
            template: push
            arguments:
              parameters:
                - name: python-version
                  value: "{{workflow.parameters.python-version}}"
                - name: image-version
                  value: "{{workflow.parameters.image-version}}"
                - name: registry
                  value: "{{workflow.parameters.registry}}"
            
               
    - name: build
      inputs:
        parameters:
          - name: python-version
          - name: image-version
          - name: registry
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            until docker ps; do sleep 1; done;
            cat <<EOF > Dockerfile
            FROM python:{{inputs.parameters.python-version}}-slim
            WORKDIR /app
            COPY . /app
            RUN pip install poetry
            EOF
            docker build -t python:{{inputs.parameters.python-version}}-{{inputs.parameters.image-version}} .
            docker save -o /workspace/python_image.tar python:{{inputs.parameters.python-version}}-{{inputs.parameters.image-version}}
            ls -l /workspace
        workingDir: /workspace
        volumeMounts:
          - name: workdir
            mountPath: /workspace
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
      sidecars:
      - name: docker-in-docker
        image: docker:dind
        securityContext:
          privileged: true
        mirrorVolumeMounts: true
        command: ["dockerd", "--host=unix:///var/run/docker.sock", "--host=tcp://0.0.0.0:2375"]
        ports:
          - containerPort: 2375  # Expose Docker daemon on HTTP port

    - name: push
      inputs:
        parameters:
          - name: python-version
          - name: image-version
          - name: registry
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            docker load < /workspace/python_image.tar
            docker tag python:{{inputs.parameters.python-version}}-{{inputs.parameters.image-version}} {{inputs.parameters.registry}}/python:{{inputs.parameters.python-version}}-{{inputs.parameters.image-version}}
            docker push {{inputs.parameters.registry}}/python:{{inputs.parameters.python-version}}-{{inputs.parameters.image-version}}
        workingDir: /workspace
        volumeMounts:
          - name: workdir
            mountPath: /workspace